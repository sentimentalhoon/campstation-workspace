# ================================
# CampStation - Base Docker Compose Configuration
# ================================
# 이 파일은 기본 구성을 정의하며, 환경별 오버라이드로 확장됩니다
# 사용법: docker-compose -f docker-compose.yml -f docker-compose.{env}.yml up
services:
  # ================================
  # Frontend Service (Next.js)
  # ================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: ${COMPOSE_PROJECT_NAME:-campstation}-frontend
    ports:
      - ${FRONTEND_PORT:-3000}:3000
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://backend:8080/api}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-CampStation}
      - NEXT_PUBLIC_APP_VERSION=${NEXT_PUBLIC_APP_VERSION:-1.0.0}
      - NEXT_PUBLIC_KAKAO_MAP_API_KEY=${NEXT_PUBLIC_KAKAO_MAP_API_KEY}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - campstation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ================================
  # Backend Service (Spring Boot)
  # ================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: ${COMPOSE_PROJECT_NAME:-campstation}-backend
    ports:
      - ${BACKEND_PORT:-8080}:8080
    # Environment variables are defined in override files (docker-compose.dev.yml, docker-compose.prod.yml)
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - campstation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # ================================
  # Database Service (PostgreSQL)
  # ================================
  db:
    image: postgres:16-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-campstation}-db
    environment:
      - POSTGRES_DB=campstation
      - POSTGRES_USER=${DB_USERNAME:-campstation}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-campstation2024}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - ${DB_PORT:-5432}:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/db:/docker-entrypoint-initdb.d
    networks:
      - campstation-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USERNAME:-campstation} -d campstation",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ================================
  # Cache Service (Redis)
  # ================================
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-campstation}-redis
    command: redis-server --protected-mode no --bind 0.0.0.0 --maxmemory ${REDIS_MAXMEMORY:-512mb} --maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru} --appendonly yes
    ports:
      - ${REDIS_PORT:-6379}:6379
    volumes:
      - redis_data:/data
    networks:
      - campstation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

# ================================
# Volumes (데이터 영속화)
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local

# ================================
# Networks (서비스 간 통신)
# ================================
networks:
  campstation-network:
    driver: bridge
