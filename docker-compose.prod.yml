# ================================
# CampStation - Production Environment Override
# ================================
# 운영 환경용 오버라이드 설정
# 보안 강화, 리소스 최적화, 모니터링 강화
services:
  # ================================
  # Frontend (Next.js → Nginx)
  # ================================
  frontend:
    image: nginx:1.25-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-campstation}-frontend-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/out:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - campstation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.5"
        reservations:
          memory: 128M
          cpus: "0.25"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # ================================
  # Backend (Spring Boot - Production)
  # ================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: ${COMPOSE_PROJECT_NAME:-campstation}-backend-prod
    ports:
      - ${BACKEND_PORT:-8080}:8080
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_URL=${DB_URL}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DRIVER=${DB_DRIVER}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-50}
      - DB_POOL_MIN_IDLE=${DB_POOL_MIN_IDLE:-10}
      - DB_CONNECTION_TIMEOUT=${DB_CONNECTION_TIMEOUT:-30000}
      - DB_IDLE_TIMEOUT=${DB_IDLE_TIMEOUT:-600000}
      - DB_MAX_LIFETIME=${DB_MAX_LIFETIME:-1800000}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_TIMEOUT=2000ms
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-1800000}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION:-604800000}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - FILE_UPLOAD_PATH=${FILE_UPLOAD_PATH}
      - FILE_MAX_SIZE_BYTES=${FILE_MAX_SIZE_BYTES:-52428800}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECURITY_LOG_LEVEL=WARN
      - SQL_LOG_LEVEL=WARN
      - LOG_FILE=/app/logs/campstation.log
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - SERVER_PORT=8080
      - SERVER_ADDRESS=0.0.0.0
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=never
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - AWS_S3_ENDPOINT=${AWS_S3_ENDPOINT}
      - JAVA_OPTS=-Xmx1024m -Xms512m -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - campstation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # ================================
  # Database (PostgreSQL - Production)
  # ================================
  db:
    image: postgres:16-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-campstation}-db-prod
    environment:
      - POSTGRES_DB=campstation
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/db:/docker-entrypoint-initdb.d:ro
      - postgres_backup:/var/lib/postgresql/backup
    networks:
      - campstation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d campstation"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"

  # ================================
  # Redis (Cache - Production)
  # ================================
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-campstation}-redis-prod
    command: redis-server --protected-mode yes --bind 0.0.0.0 --requirepass ${REDIS_PASSWORD} --maxmemory ${REDIS_MAXMEMORY:-1gb} --maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru} --appendonly yes --appendfsync everysec
    ports:
      - ${REDIS_PORT:-6379}:6379
    volumes:
      - redis_data:/data
    networks:
      - campstation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.25"
        reservations:
          memory: 256M
          cpus: "0.1"

  # ================================
  # Nginx Load Balancer (Optional)
  # ================================
  nginx-lb:
    image: nginx:1.25-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-campstation}-nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/load-balancer.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - campstation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.25"
        reservations:
          memory: 64M
          cpus: "0.1"

# ================================
# Volumes
# ================================
volumes:
  postgres_backup:
    driver: local

# ================================
# Networks
# ================================
networks:
  campstation-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: campstation-prod-bridge
