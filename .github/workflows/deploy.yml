name: Deploy to AWS ECS

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  AWS_REGION: ap-northeast-2 # 서울 리전
  ECR_REPOSITORY_FRONTEND: campstation-frontend
  ECR_REPOSITORY_BACKEND: campstation-backend
  ECS_CLUSTER: campstation-cluster
  ECS_SERVICE_FRONTEND: campstation-frontend-service
  ECS_SERVICE_BACKEND: campstation-backend-service
  ECS_TASKDEF_BACKEND: campstation-backend-task
  ECS_TASKDEF_FRONTEND: campstation-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.SUBMODULE_PAT }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Backend 빌드 및 푸시
      - name: Build and push backend image
        id: build-backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Backend 이미지 빌드
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG ./backend
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

          # ECR에 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

          echo "backend-image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Frontend 빌드 및 푸시
      - name: Build and push frontend image
        id: build-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Frontend 이미지 빌드
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG ./frontend
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

          # ECR에 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

          echo "frontend-image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # ECS 작업 정의 업데이트
      - name: Update ECS task definition
        run: |
          # Backend 작업 정의 업데이트
          aws ecs describe-task-definition --task-definition $ECS_TASKDEF_BACKEND --query taskDefinition > backend-task-definition.json

          # Frontend 작업 정의 업데이트
          aws ecs describe-task-definition --task-definition $ECS_TASKDEF_FRONTEND --query taskDefinition > frontend-task-definition.json

          # 새로운 이미지 URI로 업데이트
          jq --arg image "${{ steps.build-backend.outputs.backend-image }}" '.containerDefinitions[0].image = $image' backend-task-definition.json > backend-task-definition-updated.json
          jq --arg image "${{ steps.build-frontend.outputs.frontend-image }}" '.containerDefinitions[0].image = $image' frontend-task-definition.json > frontend-task-definition-updated.json

          # 불필요한 필드 제거 및 전체 객체 출력
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) | .' backend-task-definition-updated.json > backend-final.json
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) | .' frontend-task-definition-updated.json > frontend-final.json

      # 새로운 작업 정의 등록
      - name: Register new task definitions
        run: |
          # Backend 작업 정의 등록
          aws ecs register-task-definition --cli-input-json file://backend-final.json

          # Frontend 작업 정의 등록
          aws ecs register-task-definition --cli-input-json file://frontend-final.json

      # ECS 서비스 업데이트 (롤링 업데이트)
      - name: Update ECS services
        run: |
          # Backend 서비스 업데이트
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_BACKEND \
            --force-new-deployment \
            --query 'service.deployments[0].id' \
            --output text

          # Frontend 서비스 업데이트
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_FRONTEND \
            --force-new-deployment \
            --query 'service.deployments[0].id' \
            --output text

      # 배포 완료 대기
      - name: Wait for deployment to complete
        run: |
          # Backend 배포 대기
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_BACKEND

          # Frontend 배포 대기
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_FRONTEND
